/* Colours for graph data. Essentially there are three colours: * * The first and second apply to the two files respectively;    * * the third is used for results that are shared between the    * * two files.                                                   */color RED = color(#ff0d00, 70);color BLUE = color(#005eff, 70);color PURPLE = color(#a000ff, 70);// Colour paletteArrayList colours;// Get the maximum value of all groupings in sketchDataint getMaxValue() {    int currentMaxValue = 0;    for (int i=0; i<sketchData.length; i++) {        ArrayList[] data = sketchData[i];        for (int j=0; j<data.length; j++) {            if (data[j].length > currentMaxValue) {                currentMaxValue = data[j].length;            }        }    }    return currentMaxValue;}/* Get the upper bound for the quantity of matches based on loaded data. * * For example, for prototype 1, this represents the maximum number of   * * generated matches along the y-axis.  For prototype 2, this is the     * * maximum number along the symmetrical x-axis.                          */int getUpperBound(int maxValue) {    // Get an upper bound on the max value    int upperBound = null;    int length = nf(maxValue, 0).length();    // if the maxValue is already a suitable number for upperBound, return maxValue    if (maxValue%10*(length-1) == 0) { return maxValue; }    switch(length) {      case 1:                   // maxValue is less than 10        upperBound = 10;        break;      case 2:                   //    "    "   less than 100        upperBound = 100;        break;      case 3:                   //    "    "   less than 1000        upperBound = 1000;        break;      case 4:                   //    "    "   less than 10,000        upperBound = 10000;        break;      case 5:                   //    "    "   less than 100,000        upperBound = 100000;        break;      case 6:                   //    "    "   less than 1,000,000        upperBound = 1000000;        break;      case 7:                   //    "    "   less than 10,000,000        upperBound = 10000000;        break;      case 8:                   //    "    "   less than 100,000,000        upperBound = 100000000;        break;      default:        upperBound = maxValue;    }    // While maxValue is less than half of upperBound,    // reduce the upperBound by half.    // In other words, if:    //    //     maxValue == 1200 and upperBound == 10000,    //     upperBound will first be reduced to: 5000    //                                    then: 2500    //                                    then: 1250    //    while (maxValue < upperBound/2) { upperBound /= 2; }    return upperBound;}// Set unit heightvoid setUnitHeight(upperBound) {    if (upperBound != null) {        unitHeight = (BOTTOM_BOUND - TOP_BOUND)/upperBound;    }}// Set unit widthvoid setUnitWidth(upperBound) {    if (upperBound != null) {        unitWidth = (RIGHT_BOUND - LEFT_BOUND)/upperBound/2;    }}// Get width (in pixels) of groupings (i.e., columns)float getColumnWidth() {    return (RIGHT_BOUND - LEFT_BOUND) / groupingNumber;}// Get height (in pixels) of groupings (i.e., rows)float getRowHeight() {    return (BOTTOM_BOUND - TOP_BOUND) / groupingNumber;}